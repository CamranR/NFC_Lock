'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _events = require('events');

var _pythonShell = require('python-shell');

var _pythonShell2 = _interopRequireDefault(_pythonShell);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var NodeNfcpyId = function (_EventEmitter) {
  _inherits(NodeNfcpyId, _EventEmitter);

  function NodeNfcpyId(options) {
    var _ret;

    _classCallCheck(this, NodeNfcpyId);

    var _this = _possibleConstructorReturn(this, (NodeNfcpyId.__proto__ || Object.getPrototypeOf(NodeNfcpyId)).call(this));

    _this._options = options;
    _this._mode = 'mode' in (options || {}) ? options.mode : 'loop';
    _this._running = false;
    _this._exiting = false;
    _this._firstLaunch = false;

    if (_this._mode === 'non-loop') {
      _this._loop = false;
      _this._nonTouchend = false;
    } else if (_this._mode === 'non-touchend') {
      _this._loop = false;
      _this._nonTouchend = true;
    } else {
      _this._loop = true;
      _this._nonTouchend = false;
    }

    ['SIGHUP', 'SIGINT', 'SIGTERM', 'exit'].forEach(function (event) {
      process.once(event, function () {
        if (_this._firstLaunch) {
          _this._exiting = true;
          _this._sendSignal('SIGHUP');
        }
      });
    });

    return _ret = _this, _possibleConstructorReturn(_this, _ret);
  }

  _createClass(NodeNfcpyId, [{
    key: '_once',
    value: function _once() {
      var _this2 = this;

      if ('scriptFile' in (this._options || {}) || 'scriptPath' in (this._options || {})) {
        var scriptFile = 'scriptFile' in (this._options || {}) ? this._options.scriptFile : 'reader.py';
        var scriptPath = 'scriptPath' in (this._options || {}) ? this._options.scriptPath : __dirname;
        var options = { scriptPath: scriptPath, args: this._mode, mode: 'text' };
        this.pyshell = new _pythonShell2.default(scriptFile, options);
      } else {
        var _options = { pythonOptions: ['-m'], args: this._mode, mode: 'text' };
        this.pyshell = new _pythonShell2.default('nfcpy_id_reader', _options);
      }

      this.pyshell.stdout.on('data', function (json) {
        if (_this2.isRunning) {
          var data = JSON.parse(json.split('\n')[0]);
          _this2._running = _this2._loop || !_this2._nonTouchend && !(data.event === 'touchend');
          _this2.emit(data.event, data);
        }
      });

      this.pyshell.end(function (err) {
        if (!_this2._exiting) {
          _this2._running = false;
          _this2._firstLaunch = false;
          _this2.emit('error', err);
        }
      });
    }
  }, {
    key: '_sendSignal',
    value: function _sendSignal(signal) {
      this.pyshell.childProcess.kill(signal);
    }
  }, {
    key: 'start',
    value: function start() {
      if (this.isRunning) {
        return this;
      }
      this._running = true;

      if (!this._firstLaunch) {
        this._once();
        this._firstLaunch = true;
      } else {
        this._sendSignal('SIGCHLD');
      }

      return this;
    }
  }, {
    key: 'pause',
    value: function pause() {
      if (!this.isRunning) {
        return this;
      }
      this._running = false;
      this._sendSignal('SIGCHLD');
      return this;
    }
  }, {
    key: 'isRunning',
    get: function get() {
      return this._running;
    }
  }]);

  return NodeNfcpyId;
}(_events.EventEmitter);

exports.default = NodeNfcpyId;